using OfficeOpenXml;
using OfficeOpenXml.Style;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Web;
using System.Web.Configuration;
using System.Web.Mvc;
using Web.BaseSecurity;
using Web.Core;
using Web.Model;
using Web.Repository;
using Web.Repository.Entity;

namespace Web.Areas.Admin.Controllers
{
    public class VideoController : BaseController
    {
        readonly IVideoRepository _videoRepository = new VideoRepository();
        readonly ILanguagesRepository _languagesRepository = new LanguagesRepository();
        readonly IPageElementRepository _pageElementRepository = new PageElementRepository();
        readonly IUserAdminRepository _userAdminRepository = new UserAdminRepository();
        //
        // GET: /Admin/Video/
        [Authorize(Roles = "Index")]
        public ActionResult Index()
        {
            var objUser = _userAdminRepository.Find(User.ID);
            //var arrPageElement = objUser.PageElementID.Split(',').Select(int.Parse).ToList();
            var lstLanguages = _languagesRepository.GetAll();
            TempData["Languages"] = lstLanguages.ToList();
            /*var lstpageElements = _pageElementRepository.GetAll().Where(g => arrPageElement.Contains(g.ID));
            TempData["PageElement"] = lstpageElements.ToList();*/
            return View();
        }

        [Authorize(Roles = "Index")]
        [HttpPost]
        public ActionResult ListData(string Name, string LangCode, int PageElementId = 0, int page = 1,string NgayDang= null,string NgayKet = null)
        {
            var objUser = _userAdminRepository.Find(User.ID);
            var lstVideo = _videoRepository.GetAll();
            if (!string.IsNullOrEmpty(LangCode))
            {
                lstVideo = lstVideo.Where(g => g.LangCode == LangCode);
            }
            if (!string.IsNullOrEmpty(Name))
            {
                lstVideo =
                    lstVideo.Where(
                        g =>
                            HelperString.UnsignCharacter(g.Name.ToLower().Trim())
                                .Contains(HelperString.UnsignCharacter(Name.ToLower().Trim())));
            }
            if (!string.IsNullOrEmpty(NgayDang) && !string.IsNullOrEmpty(NgayKet))
            {
                var ngaydang = HelperDateTime.ConvertDate(NgayDang);
                var ngayket = HelperDateTime.ConvertDate(NgayKet);
                lstVideo = lstVideo.Where(s => s.CreatedDate.Date >= ngaydang && s.CreatedDate.Date <= ngayket);
            }
            var totalVideo = lstVideo.Count();
            lstVideo = lstVideo.OrderByDescending(g => g.ID).Skip((page - 1) * Webconfig.RowLimit).Take(Webconfig.RowLimit);
            TempData["LSTVIDEO"] = lstVideo.ToList();
            return Json(new
            {
                viewContent = RenderViewToString("~/Areas/Admin/Views/Video/_ListData.cshtml", lstVideo),
                totalPages = Math.Ceiling(((double)totalVideo / Webconfig.RowLimit)),
            }, JsonRequestBehavior.AllowGet);
        }
        public string ExportExcel()
        {
            using (var package = new ExcelPackage())
            {
                var Data = (List<tbl_Video>)TempData["LSTVIDEO"];
                var ws = package.Workbook.Worksheets.Add("Sheet1");
                // Tạo header
                ws.Cells["A1:D1"].Merge = true;
                ws.Cells[1, 1].Value = "Danh sách Video";
                ws.Cells[2, 1].Value = "STT";
                ws.Cells[2, 2].Value = "Tên Video";
                ws.Cells[2, 3].Value = "Ngày Đăng";
                ws.Cells[2, 4].Value = "Người Đăng";
                ws.Cells["A1:F1"].Style.Font.Bold = true;
                ws.Cells["A1:F1"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                ws.Cells["A1:F1"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                ws.Cells["A2:F2"].Style.Font.Bold = true;
                ws.Cells["A2:F2"].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                ws.Cells["A2:F2"].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                ws.Cells["A2:F2"].Style.WrapText = true;
                ws.Cells["A:XFD"].Style.Font.Name = "Arial";
             
                ws.Row(1).Height = 30;
                ws.Row(2).Height = 30;
                ws.Column(2).Width = 70;
                ws.Column(3).Width = 20;
                ws.Column(4).Width = 30;
                int iRow = 2;
                int i = 0;
                foreach (var item in Data)
                {
                    i++;
                    iRow++;
                    ws.Cells[iRow, 1].Value = i.ToString();
                    ws.Cells[iRow, 2].Value = item.Name;
                    ws.Cells[iRow, 3].Value = string.Format("{0:dd/MM/yyyy}", item.CreatedDate);
                    ws.Cells[iRow, 4].Value = item.CreatedBy;
                    ws.Row(iRow).Height = 20;
                }
                DateTime now = DateTime.Now;
                string timeStr = now.ToString("yyyyMMddHHmm");
                System.Web.HttpContext.Current.Response.Clear();
                System.Web.HttpContext.Current.Response.AddHeader("content-disposition", "attachment;  filename=" + string.Format("DS_Video-{0}{1}{2}_{3}.xlsx", now.Year, now.Month, now.Day, timeStr));
                System.Web.HttpContext.Current.Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
                System.Web.HttpContext.Current.Response.BinaryWrite(package.GetAsByteArray());
                System.Web.HttpContext.Current.Response.End();
            }
            return "";
        }
        [Authorize(Roles = "Add")]
        public ActionResult Add()
        {
            var objUser = _userAdminRepository.Find(User.ID);
            return Json(RenderViewToString("~/Areas/Admin/Views/Video/_Create.cshtml"), JsonRequestBehavior.AllowGet);
        }

        [Authorize(Roles = "Add")]
        [HttpPost]
        public ActionResult Add(tbl_Video obj)
        {
            obj.CreatedDate = DateTime.Now;
            obj.CreatedBy = User.Username;
            try
            {
                _videoRepository.Add(obj);
                LogController.AddLog(string.Format("Thêm mới video: {0}", obj.Name), User.Username);
                return Json(new
                {
                    IsSuccess = true,
                    Messenger = "Thêm mới video thành công",
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception)
            {
                return Json(new
                {
                    IsSuccess = false,
                    Messenger = string.Format("Thêm mới video thất bại")
                }, JsonRequestBehavior.AllowGet);
            }
        }
        [Authorize(Roles = "Edit")]
        public ActionResult Edit(int id)
        {
            var objUser = _userAdminRepository.Find(User.ID);
            var objVideo = _videoRepository.Find(id);
            return Json(RenderViewToString("~/Areas/Admin/Views/Video/_Edit.cshtml", objVideo), JsonRequestBehavior.AllowGet);
        }

        [Authorize(Roles = "Edit")]
        [HttpPost]
        public ActionResult Edit(tbl_Video obj)
        {
            var oldobj = _videoRepository.Find(obj.ID);
            oldobj.Images = obj.Images;
            oldobj.ModifiedBy = User.Username;
            oldobj.ModifiedDate = DateTime.Now;
            oldobj.LangCode = obj.LangCode;
            oldobj.Name = obj.Name;
            oldobj.Url = obj.Url;
            oldobj.Status = obj.Status;
            oldobj.IsHome = obj.IsHome;
            oldobj.Ordering = obj.Ordering;
            try
            {
                _videoRepository.Edit(oldobj);
                LogController.AddLog(string.Format("Sửa Video: {0}", obj.Name), User.Username);
                return Json(new
                {
                    IsSuccess = true,
                    Messenger = "Cập nhật Video thành công",
                }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception)
            {
                return Json(new
                {
                    IsSuccess = false,
                    Messenger = string.Format("Cập nhật Video thất bại")
                }, JsonRequestBehavior.AllowGet);
            }
        }
        [Authorize(Roles = "Delete")]
        [HttpPost]
        public ActionResult Delete(int id)
        {
            try
            {
                var obj = _videoRepository.Find(id);
                _videoRepository.Delete(id);
                if (obj.Type == 1)
                {
                    var file = Server.MapPath(obj.Url);
                    if (System.IO.File.Exists(file))
                    {
                        Common.TryToDelete(file);
                    }
                }
                LogController.AddLog(string.Format("Xóa Video: {0}", obj.Name), User.Username);
            }
            catch (Exception)
            {

                return Json(new
                {
                    IsSuccess = false,
                    Messenger = string.Format("Xóa Video thất bại")
                }, JsonRequestBehavior.AllowGet);
            }
            return Json(new
            {
                IsSuccess = true,
                Messenger = "Xóa Video thành công",
            }, JsonRequestBehavior.AllowGet);
        }

        [Authorize(Roles = "Delete")]
        [HttpPost]
        public ActionResult DeleteAll(string lstid)
        {
            var arrid = lstid.Split(',');
            var count = 0;
            foreach (var item in arrid)
            {
                try
                {
                    _videoRepository.Delete(Convert.ToInt32(item));
                    count++;
                }
                catch (Exception)
                {
                    continue;
                }
            }
            return Json(new
            {
                Messenger = string.Format("Xóa thành công {0} video", count),
            }, JsonRequestBehavior.AllowGet);
        }
        [HttpPost]

        public JsonResult Upload()
        {
            if (Request.Files.Count <= 0)
                return Json(new { status = false, msg = "Bạn chưa chọn file." });
            var videoExtention = new[] { "avi", "mp4", "flv", "wmv", "mov" };
            System.Configuration.Configuration config = WebConfigurationManager.OpenWebConfiguration("~");
            var section = config.GetSection("system.web/httpRuntime") as HttpRuntimeSection;
            double maxFileSize = 4 * 2048 * 2048;
            if (section != null)
            {
                maxFileSize = section.MaxRequestLength;
            }
            var now = DateTime.Now;
            var objInfo = new FileInfo();
            try
            {

                //  Get all files from Request object  
                var files = Request.Files[0];
                var path = ConfigUpload.TargetUpload;
                var fileData = files;
                var extention = GetExtention(fileData.FileName);
                if (!videoExtention.Contains(extention))
                {
                    return Json(new { status = false, msg = "Video upload không đúng định dạng cho phép." });
                }
                #region KIỂM TRA KÍCH THƯỚC FILE
                var fileSize = fileData.ContentLength;
                if (fileSize > (maxFileSize))
                {
                    return Json(new { status = false, msg = "tập tin này vượt quá dung lượng cho phép" });
                }
                if (fileSize == 0)
                {
                    return Json(new { status = false, msg = "kiểm tra lại tập tin này" });
                }
                #endregion
                #region TẠO THƯ MỤC CHỨA FILES UPLOAD
                path = string.Format("{0}/{1}", path, "Videos");
                if (!Directory.Exists(Server.MapPath(path)))
                {
                    Directory.CreateDirectory(Server.MapPath(path));
                }
                path = string.Format("{0}/{1}/{2}", path, now.Year, now.Month);
                if (!Directory.Exists(Server.MapPath(path)))
                {
                    Directory.CreateDirectory(Server.MapPath(path));
                }
                #endregion
                #region COPY FILE VÀO THƯ MỤC

                var newName = string.Format("{0}-{1}", HelperEncryptor.Md5Hash(DateTime.Now.ToString()), fileData.FileName);
                fileData.SaveAs(string.Format("{0}/{1}", Server.MapPath(path), newName));
                #endregion
                objInfo = new FileInfo
                {
                    FileName = string.Format("{0}/{1}", path, newName),
                    FileNameOriginal = fileData.FileName,
                    FileSize = fileData.ContentLength < 1024 ? string.Format("{0} Bytes", (fileData.ContentLength)) : string.Format("{0} KB", (fileData.ContentLength / 1024))
                };
            }
            catch (Exception)
            {
                return Json(new { status = false, msg = "Upload không thành công", file = objInfo });
            }
            return Json(new { status = true, msg = "Upload thành công", file = objInfo });
        }

        public class FileInfo
        {
            public string FileName { get; set; }
            public string FileSize { get; set; }
            public string FileNameOriginal { get; set; }
        }
        public string GetExtention(string file)
        {
            if (!string.IsNullOrEmpty(file))
            {
                var arr = file.Split('.');
                if (arr.Length > 0)
                {
                    return arr.Last();
                }
            }
            return "";
        }
    }
}
